name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  test:
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv app/venv
          source app/venv/bin/activate
          pip install -r app/requirements.txt

      - name: Run tests
        env:
          PYTHONPATH: .
        run: |
          source app/venv/bin/activate
          pytest app/tests/

      - name: Install Trivy CLI
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Dependency vulnerability scan
        run: trivy fs --exit-code 0 --severity HIGH,CRITICAL . 

  build_and_push:
    # needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr_login
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} ./app
          docker push ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Install Trivy CLI
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Container vulnerability scan
        run: |
          trivy image --exit-code 0 --severity HIGH,CRITICAL ${{ secrets.ECR_REGISTRY }}/${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

  deploy_staging:
    needs: build_and_push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Staging
        run: echo "Deploy to staging environment logic here"

  approval:
    needs: deploy_staging
    runs-on: ubuntu-latest
    outputs:
      approved: ${{ steps.wait_for_approval.outputs.approved }}
    steps:
      - name: Wait for approval before production deploy
        id: wait_for_approval
        uses: peter-evans/slash-command-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          reaction-token: ${{ secrets.GITHUB_TOKEN }}
          commands: approve
          issue-type: pull-request

  deploy_production:
    needs: approval
    if: needs.approval.outputs.approved == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Production
        run: echo "Deploy to production environment logic here"

  notify:
    needs: [test, build_and_push, deploy_staging, deploy_production]
    if: failure()
    runs-on: ubuntu-latest
    steps:
      - name: Slack Notification on Failure
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: "CI/CD pipeline failed for repository ${{ github.repository }} at run #${{ github.run_number }}"
